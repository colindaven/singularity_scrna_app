# Singularity: R_app_recipe.txt. Test/work in progress! 
# Colin Davenport, June 2020
Bootstrap: debootstrap
OSVersion: focal
MirrorURL: http://de.archive.ubuntu.com/ubuntu/


%runscript
    #!/bin/bash
    exec echo "The runscript is the containers default runtime command!"


%files
#   /home/rcug/testFile.txt        # copied to root of container
#   /home/rcug/testFile.txt     /opt/testFile.txt #
#   /home/rcug/testFile.txt     /data/testFile.txt #

%environment
    export http_proxy=http://proxy.mh-hannover.de:8080
    export https_proxy=http://proxy.mh-hannover.de:8080
    VARIABLE1=xx
    export VARIABLE1

%labels
   AUTHOR davenport.colin@mh-hannover.de

%post

    echo "The post section is where you can install, and configure your container."

    export http_proxy=$http_proxy
    export https_proxy=$https_proxy

    # In order to get locales working properly inside a Singularity container
    # we need to do the following:
    apt-get update && apt-get install -y \
            locales language-pack-fi language-pack-en
            export LANGUAGE=en_US.UTF-8 && \
            export LANG=en_US.UTF-8 && \
            export LC_ALL=en_US.UTF-8 && \
            locale-gen en_US.UTF-8 && \
            dpkg-reconfigure locales


    # generate Users
    groupadd rcug -g 9415
    useradd -s /bin/bash rcug -u 9415 -g 9415 -m
    groupadd shiny -g 19987
    useradd -s /bin/bash shiny -u 19987 -g 19987 -m



    # debootstrap will only find packages from one source, this is the workaround
    sed -i 's/$/ universe/' /etc/apt/sources.list

    # Install R dependecies, Python, misc. utilities
    apt update && apt -y install python3 build-essential libcurl4-openssl-dev openssh-client openssh-server libssh-dev wget vim git nano cmake 
    apt -y install gfortran g++ curl python3 autoconf bzip2 libtool libtool-bin python3-dev
    # Install R itself and dependencies
    apt -y install r-base-core libopenblas-dev python3-pip  
    apt clean

    # fast load R packages (if they exist!). Problematic
#    R -e 'ip <- readRDS("/working2/tmp/colin/CurrentPackages.rds"); install.packages(ip[, 1])'


    # Install required R packages
#    R --slave -e 'install.packages(c("shiny", "Seurat"), repos="https://cloud.r-project.org/")'
#    R --slave -e 'install.packages(c("ggplot2", "readxl"), repos="https://cloud.r-project.org/")'


    mkdir /data


    # An even more appropriate system might be shinyproxy
    # https://www.shinyproxy.io/


    # Example docker code for R Shiny app using golem

    #FROM rocker/tidyverse:3.6.1
    #R -e 'install.packages("remotes")'
    #R -e 'remotes::install_github("r-lib/remotes", ref = "97bbf81")'
#    R -e 'remotes::install_cran("shiny")'
#    R -e 'remotes::install_cran("golem")'
#    cp app.R /app.R
    # open port in singularity, expose sounds like docker syntax
#    EXPOSE 3838
#    R -e "options('shiny.port'=3838,shiny.host='0.0.0.0'); shiny::runApp('app.R')"

#    R -e "sessInfo()"


    # to get shiny server running with ports etc is complex
    # see https://github.com/vsoch/singularity-shiny
    # https://github.com/vsoch/singularity-shiny/blob/master/prepare_template.sh
#    mkdir -p /var/log/shiny-server
#    chown shiny:shiny /var/log/shiny-server


    # Save R packages (I did this manually which worked, it did not in container build process)
#    R -e 'ip <- installed.packages(); saveRDS(ip, "/working2/tmp/colin/CurrentPackages.rds")'
